// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from weather.idl

#import "MTDataPoint+Private.h"
#import "DJIMarshal+Private.h"
#include <cassert>

namespace djinni_generated {

auto DataPoint::toCpp(ObjcType obj) -> CppType
{
    assert(obj);
    return {::djinni::I64::toCpp(obj.time),
            ::djinni::String::toCpp(obj.summary),
            ::djinni::String::toCpp(obj.icon),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(obj.sunriseTime),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(obj.sunsetTime),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(obj.moonPhase),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(obj.nearestStormDistance),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(obj.nearestStormBearing),
            ::djinni::F64::toCpp(obj.precipIntensity),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(obj.precipIntensityMax),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(obj.precipIntensityMaxTime),
            ::djinni::F64::toCpp(obj.precipProbability),
            ::djinni::String::toCpp(obj.precipType),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(obj.precipAccumulation),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(obj.temperature),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(obj.temperatureMin),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(obj.temperatureMinTime),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(obj.temperatureMax),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(obj.temperatureMaxTime),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(obj.apparentTemperature),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(obj.apparentTemperatureMax),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(obj.apparentTemperatureMaxTime),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(obj.apparentTemperatureMin),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(obj.apparentTemperatureMinTime),
            ::djinni::F64::toCpp(obj.dewPoint),
            ::djinni::F64::toCpp(obj.windSpeed),
            ::djinni::F64::toCpp(obj.windBearing),
            ::djinni::F64::toCpp(obj.cloudCover),
            ::djinni::F64::toCpp(obj.humidity),
            ::djinni::F64::toCpp(obj.pressure),
            ::djinni::F64::toCpp(obj.visibility),
            ::djinni::F64::toCpp(obj.ozone)};
}

auto DataPoint::fromCpp(const CppType& cpp) -> ObjcType
{
    return [[MTDataPoint alloc] initWithTime:(::djinni::I64::fromCpp(cpp.time))
                                     summary:(::djinni::String::fromCpp(cpp.summary))
                                        icon:(::djinni::String::fromCpp(cpp.icon))
                                 sunriseTime:(::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(cpp.sunriseTime))
                                  sunsetTime:(::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(cpp.sunsetTime))
                                   moonPhase:(::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(cpp.moonPhase))
                        nearestStormDistance:(::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(cpp.nearestStormDistance))
                         nearestStormBearing:(::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(cpp.nearestStormBearing))
                             precipIntensity:(::djinni::F64::fromCpp(cpp.precipIntensity))
                          precipIntensityMax:(::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(cpp.precipIntensityMax))
                      precipIntensityMaxTime:(::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(cpp.precipIntensityMaxTime))
                           precipProbability:(::djinni::F64::fromCpp(cpp.precipProbability))
                                  precipType:(::djinni::String::fromCpp(cpp.precipType))
                          precipAccumulation:(::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(cpp.precipAccumulation))
                                 temperature:(::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(cpp.temperature))
                              temperatureMin:(::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(cpp.temperatureMin))
                          temperatureMinTime:(::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(cpp.temperatureMinTime))
                              temperatureMax:(::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(cpp.temperatureMax))
                          temperatureMaxTime:(::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(cpp.temperatureMaxTime))
                         apparentTemperature:(::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(cpp.apparentTemperature))
                      apparentTemperatureMax:(::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(cpp.apparentTemperatureMax))
                  apparentTemperatureMaxTime:(::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(cpp.apparentTemperatureMaxTime))
                      apparentTemperatureMin:(::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(cpp.apparentTemperatureMin))
                  apparentTemperatureMinTime:(::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(cpp.apparentTemperatureMinTime))
                                    dewPoint:(::djinni::F64::fromCpp(cpp.dewPoint))
                                   windSpeed:(::djinni::F64::fromCpp(cpp.windSpeed))
                                 windBearing:(::djinni::F64::fromCpp(cpp.windBearing))
                                  cloudCover:(::djinni::F64::fromCpp(cpp.cloudCover))
                                    humidity:(::djinni::F64::fromCpp(cpp.humidity))
                                    pressure:(::djinni::F64::fromCpp(cpp.pressure))
                                  visibility:(::djinni::F64::fromCpp(cpp.visibility))
                                       ozone:(::djinni::F64::fromCpp(cpp.ozone))];
}

}  // namespace djinni_generated
