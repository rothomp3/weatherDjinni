// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from weather.idl

#import "MTNetworkController+Private.h"
#import "MTNetworkController.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class NetworkController::ObjcProxy final
: public ::NetworkController
, public ::djinni::DbxObjcWrapperCache<ObjcProxy>::Handle
{
public:
    using Handle::Handle;
    std::vector<uint8_t> get(const std::string & URI) override
    {
        @autoreleasepool {
            auto r = [Handle::get() get:(::djinni::String::fromCpp(URI))];
            return ::djinni::Binary::toCpp(r);
        }
    }
    std::vector<uint8_t> post(const std::string & URI, const std::vector<uint8_t> & body) override
    {
        @autoreleasepool {
            auto r = [Handle::get() post:(::djinni::String::fromCpp(URI))
                                    body:(::djinni::Binary::fromCpp(body))];
            return ::djinni::Binary::toCpp(r);
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto NetworkController::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::DbxObjcWrapperCache<ObjcProxy>::getInstance()->get(objc);
}

auto NetworkController::fromCpp(const CppType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).Handle::get();
}

}  // namespace djinni_generated
