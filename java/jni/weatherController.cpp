// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from weather.idl

#include "weatherController.hpp"  // my header
#include "Marshal.hpp"
#include "forecast.hpp"
#include "network_controller.hpp"
#include "weatherController.hpp"

namespace djinni_generated {

WeatherController::WeatherController() : ::djinni::JniInterface<::WeatherController, WeatherController>("com/wta/weather/WeatherController$CppProxy") {}

WeatherController::~WeatherController() = default;


CJNIEXPORT void JNICALL Java_com_wta_weather_WeatherController_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<djinni::CppProxyHandle<::WeatherController>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_wta_weather_WeatherController_00024CppProxy_native_1forecast(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_latitude, jdouble j_longitude)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::CppProxyHandle<::WeatherController>::get(nativeRef);
        auto r = ref->forecast(::djinni::F64::toCpp(jniEnv, j_latitude),
                               ::djinni::F64::toCpp(jniEnv, j_longitude));
        return ::djinni_generated::Forecast::fromCpp(jniEnv, r).release();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_wta_weather_WeatherController_createWithNetworkController(JNIEnv* jniEnv, jobject /*this*/, jobject j_controller)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::WeatherController::create_with_network_controller(::djinni_generated::NetworkController::toCpp(jniEnv, j_controller));
        return ::djinni_generated::WeatherController::fromCpp(jniEnv, r).release();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
