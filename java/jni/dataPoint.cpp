// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from weather.idl

#include "dataPoint.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

DataPoint::DataPoint() = default;

DataPoint::~DataPoint() = default;

auto DataPoint::fromCpp(JNIEnv* jniEnv, const CppType& c) -> ::djinni::LocalRef<JniType> {
    const auto& data = ::djinni::JniClass<DataPoint>::get();
    auto r = ::djinni::LocalRef<JniType>{jniEnv->NewObject(data.clazz.get(), data.jconstructor,
                                                           ::djinni::I64::fromCpp(jniEnv, c.time),
                                                           ::djinni::String::fromCpp(jniEnv, c.summary).get(),
                                                           ::djinni::String::fromCpp(jniEnv, c.icon).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(jniEnv, c.sunriseTime).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(jniEnv, c.sunsetTime).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(jniEnv, c.moonPhase).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(jniEnv, c.nearestStormDistance).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(jniEnv, c.nearestStormBearing).get(),
                                                           ::djinni::F64::fromCpp(jniEnv, c.precipIntensity),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(jniEnv, c.precipIntensityMax).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(jniEnv, c.precipIntensityMaxTime).get(),
                                                           ::djinni::F64::fromCpp(jniEnv, c.precipProbability),
                                                           ::djinni::String::fromCpp(jniEnv, c.precipType).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(jniEnv, c.precipAccumulation).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(jniEnv, c.temperature).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(jniEnv, c.temperatureMin).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(jniEnv, c.temperatureMinTime).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(jniEnv, c.temperatureMax).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(jniEnv, c.temperatureMaxTime).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(jniEnv, c.apparentTemperature).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(jniEnv, c.apparentTemperatureMax).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(jniEnv, c.apparentTemperatureMaxTime).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(jniEnv, c.apparentTemperatureMin).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(jniEnv, c.apparentTemperatureMinTime).get(),
                                                           ::djinni::F64::fromCpp(jniEnv, c.dewPoint),
                                                           ::djinni::F64::fromCpp(jniEnv, c.windSpeed),
                                                           ::djinni::F64::fromCpp(jniEnv, c.windBearing),
                                                           ::djinni::F64::fromCpp(jniEnv, c.cloudCover),
                                                           ::djinni::F64::fromCpp(jniEnv, c.humidity),
                                                           ::djinni::F64::fromCpp(jniEnv, c.pressure),
                                                           ::djinni::F64::fromCpp(jniEnv, c.visibility),
                                                           ::djinni::F64::fromCpp(jniEnv, c.ozone))};
    ::djinni::jniExceptionCheck(jniEnv);
    return r;
}

auto DataPoint::toCpp(JNIEnv* jniEnv, JniType j) -> CppType {
    ::djinni::JniLocalScope jscope(jniEnv, 33);
    assert(j != nullptr);
    const auto& data = ::djinni::JniClass<DataPoint>::get();
    return {::djinni::I64::toCpp(jniEnv, jniEnv->GetLongField(j, data.field_time)),
            ::djinni::String::toCpp(jniEnv, (jstring)jniEnv->GetObjectField(j, data.field_summary)),
            ::djinni::String::toCpp(jniEnv, (jstring)jniEnv->GetObjectField(j, data.field_icon)),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_sunriseTime)),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_sunsetTime)),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_moonPhase)),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_nearestStormDistance)),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_nearestStormBearing)),
            ::djinni::F64::toCpp(jniEnv, jniEnv->GetDoubleField(j, data.field_precipIntensity)),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_precipIntensityMax)),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_precipIntensityMaxTime)),
            ::djinni::F64::toCpp(jniEnv, jniEnv->GetDoubleField(j, data.field_precipProbability)),
            ::djinni::String::toCpp(jniEnv, (jstring)jniEnv->GetObjectField(j, data.field_precipType)),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_precipAccumulation)),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_temperature)),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_temperatureMin)),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_temperatureMinTime)),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_temperatureMax)),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_temperatureMaxTime)),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_apparentTemperature)),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_apparentTemperatureMax)),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_apparentTemperatureMaxTime)),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_apparentTemperatureMin)),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_apparentTemperatureMinTime)),
            ::djinni::F64::toCpp(jniEnv, jniEnv->GetDoubleField(j, data.field_dewPoint)),
            ::djinni::F64::toCpp(jniEnv, jniEnv->GetDoubleField(j, data.field_windSpeed)),
            ::djinni::F64::toCpp(jniEnv, jniEnv->GetDoubleField(j, data.field_windBearing)),
            ::djinni::F64::toCpp(jniEnv, jniEnv->GetDoubleField(j, data.field_cloudCover)),
            ::djinni::F64::toCpp(jniEnv, jniEnv->GetDoubleField(j, data.field_humidity)),
            ::djinni::F64::toCpp(jniEnv, jniEnv->GetDoubleField(j, data.field_pressure)),
            ::djinni::F64::toCpp(jniEnv, jniEnv->GetDoubleField(j, data.field_visibility)),
            ::djinni::F64::toCpp(jniEnv, jniEnv->GetDoubleField(j, data.field_ozone))};
}

}  // namespace djinni_generated
