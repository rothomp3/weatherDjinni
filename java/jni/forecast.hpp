// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from weather.idl

#pragma once

#include "djinni_support.hpp"
#include "forecast.hpp"

namespace djinni_generated {

class Forecast final {
public:
    using CppType = ::Forecast;
    using JniType = jobject;

    using Boxed = Forecast;

    ~Forecast();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    Forecast();
    friend ::djinni::JniClass<Forecast>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/wta/weather/Forecast") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(DDLjava/lang/String;ILcom/wta/weather/DataPoint;Lcom/wta/weather/DataBlock;Lcom/wta/weather/DataBlock;Lcom/wta/weather/DataBlock;Ljava/util/ArrayList;Lcom/wta/weather/Flags;)V") };
    const jfieldID field_latitude { ::djinni::jniGetFieldID(clazz.get(), "latitude", "D") };
    const jfieldID field_longitude { ::djinni::jniGetFieldID(clazz.get(), "longitude", "D") };
    const jfieldID field_timezone { ::djinni::jniGetFieldID(clazz.get(), "timezone", "Ljava/lang/String;") };
    const jfieldID field_offset { ::djinni::jniGetFieldID(clazz.get(), "offset", "I") };
    const jfieldID field_currently { ::djinni::jniGetFieldID(clazz.get(), "currently", "Lcom/wta/weather/DataPoint;") };
    const jfieldID field_minutely { ::djinni::jniGetFieldID(clazz.get(), "minutely", "Lcom/wta/weather/DataBlock;") };
    const jfieldID field_hourly { ::djinni::jniGetFieldID(clazz.get(), "hourly", "Lcom/wta/weather/DataBlock;") };
    const jfieldID field_daily { ::djinni::jniGetFieldID(clazz.get(), "daily", "Lcom/wta/weather/DataBlock;") };
    const jfieldID field_alerts { ::djinni::jniGetFieldID(clazz.get(), "alerts", "Ljava/util/ArrayList;") };
    const jfieldID field_flags { ::djinni::jniGetFieldID(clazz.get(), "flags", "Lcom/wta/weather/Flags;") };
};

}  // namespace djinni_generated
