// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from weather.idl

#include "flags.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

Flags::Flags() = default;

Flags::~Flags() = default;

auto Flags::fromCpp(JNIEnv* jniEnv, const CppType& c) -> ::djinni::LocalRef<JniType> {
    const auto& data = ::djinni::JniClass<Flags>::get();
    auto r = ::djinni::LocalRef<JniType>{jniEnv->NewObject(data.clazz.get(), data.jconstructor,
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(jniEnv, c.darksky_unavailable).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::List<::djinni::String>>::fromCpp(jniEnv, c.darksky_stations).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::List<::djinni::String>>::fromCpp(jniEnv, c.datapoint_stations).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::List<::djinni::String>>::fromCpp(jniEnv, c.isd_stations).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::List<::djinni::String>>::fromCpp(jniEnv, c.lamp_stations).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::List<::djinni::String>>::fromCpp(jniEnv, c.metar_stations).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(jniEnv, c.metno_license).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::List<::djinni::String>>::fromCpp(jniEnv, c.sources).get(),
                                                           ::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(jniEnv, c.units).get())};
    ::djinni::jniExceptionCheck(jniEnv);
    return r;
}

auto Flags::toCpp(JNIEnv* jniEnv, JniType j) -> CppType {
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    assert(j != nullptr);
    const auto& data = ::djinni::JniClass<Flags>::get();
    return {::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(jniEnv, (jstring)jniEnv->GetObjectField(j, data.field_darkskyUnavailable)),
            ::djinni::Optional<std::experimental::optional, ::djinni::List<::djinni::String>>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_darkskyStations)),
            ::djinni::Optional<std::experimental::optional, ::djinni::List<::djinni::String>>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_datapointStations)),
            ::djinni::Optional<std::experimental::optional, ::djinni::List<::djinni::String>>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_isdStations)),
            ::djinni::Optional<std::experimental::optional, ::djinni::List<::djinni::String>>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_lampStations)),
            ::djinni::Optional<std::experimental::optional, ::djinni::List<::djinni::String>>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_metarStations)),
            ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(jniEnv, (jstring)jniEnv->GetObjectField(j, data.field_metnoLicense)),
            ::djinni::Optional<std::experimental::optional, ::djinni::List<::djinni::String>>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_sources)),
            ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(jniEnv, (jstring)jniEnv->GetObjectField(j, data.field_units))};
}

}  // namespace djinni_generated
