// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from weather.idl

#pragma once

#include "dataPoint.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class DataPoint final {
public:
    using CppType = ::DataPoint;
    using JniType = jobject;

    using Boxed = DataPoint;

    ~DataPoint();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    DataPoint();
    friend ::djinni::JniClass<DataPoint>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/wta/weather/DataPoint") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(JLjava/lang/String;Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Double;DLjava/lang/Double;Ljava/lang/Long;DLjava/lang/String;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Long;Ljava/lang/Double;Ljava/lang/Long;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Long;Ljava/lang/Double;Ljava/lang/Long;DDDDDDDD)V") };
    const jfieldID field_time { ::djinni::jniGetFieldID(clazz.get(), "time", "J") };
    const jfieldID field_summary { ::djinni::jniGetFieldID(clazz.get(), "summary", "Ljava/lang/String;") };
    const jfieldID field_icon { ::djinni::jniGetFieldID(clazz.get(), "icon", "Ljava/lang/String;") };
    const jfieldID field_sunriseTime { ::djinni::jniGetFieldID(clazz.get(), "sunriseTime", "Ljava/lang/Long;") };
    const jfieldID field_sunsetTime { ::djinni::jniGetFieldID(clazz.get(), "sunsetTime", "Ljava/lang/Long;") };
    const jfieldID field_moonPhase { ::djinni::jniGetFieldID(clazz.get(), "moonPhase", "Ljava/lang/Double;") };
    const jfieldID field_nearestStormDistance { ::djinni::jniGetFieldID(clazz.get(), "nearestStormDistance", "Ljava/lang/Double;") };
    const jfieldID field_nearestStormBearing { ::djinni::jniGetFieldID(clazz.get(), "nearestStormBearing", "Ljava/lang/Double;") };
    const jfieldID field_precipIntensity { ::djinni::jniGetFieldID(clazz.get(), "precipIntensity", "D") };
    const jfieldID field_precipIntensityMax { ::djinni::jniGetFieldID(clazz.get(), "precipIntensityMax", "Ljava/lang/Double;") };
    const jfieldID field_precipIntensityMaxTime { ::djinni::jniGetFieldID(clazz.get(), "precipIntensityMaxTime", "Ljava/lang/Long;") };
    const jfieldID field_precipProbability { ::djinni::jniGetFieldID(clazz.get(), "precipProbability", "D") };
    const jfieldID field_precipType { ::djinni::jniGetFieldID(clazz.get(), "precipType", "Ljava/lang/String;") };
    const jfieldID field_precipAccumulation { ::djinni::jniGetFieldID(clazz.get(), "precipAccumulation", "Ljava/lang/Double;") };
    const jfieldID field_temperature { ::djinni::jniGetFieldID(clazz.get(), "temperature", "Ljava/lang/Double;") };
    const jfieldID field_temperatureMin { ::djinni::jniGetFieldID(clazz.get(), "temperatureMin", "Ljava/lang/Double;") };
    const jfieldID field_temperatureMinTime { ::djinni::jniGetFieldID(clazz.get(), "temperatureMinTime", "Ljava/lang/Long;") };
    const jfieldID field_temperatureMax { ::djinni::jniGetFieldID(clazz.get(), "temperatureMax", "Ljava/lang/Double;") };
    const jfieldID field_temperatureMaxTime { ::djinni::jniGetFieldID(clazz.get(), "temperatureMaxTime", "Ljava/lang/Long;") };
    const jfieldID field_apparentTemperature { ::djinni::jniGetFieldID(clazz.get(), "apparentTemperature", "Ljava/lang/Double;") };
    const jfieldID field_apparentTemperatureMax { ::djinni::jniGetFieldID(clazz.get(), "apparentTemperatureMax", "Ljava/lang/Double;") };
    const jfieldID field_apparentTemperatureMaxTime { ::djinni::jniGetFieldID(clazz.get(), "apparentTemperatureMaxTime", "Ljava/lang/Long;") };
    const jfieldID field_apparentTemperatureMin { ::djinni::jniGetFieldID(clazz.get(), "apparentTemperatureMin", "Ljava/lang/Double;") };
    const jfieldID field_apparentTemperatureMinTime { ::djinni::jniGetFieldID(clazz.get(), "apparentTemperatureMinTime", "Ljava/lang/Long;") };
    const jfieldID field_dewPoint { ::djinni::jniGetFieldID(clazz.get(), "dewPoint", "D") };
    const jfieldID field_windSpeed { ::djinni::jniGetFieldID(clazz.get(), "windSpeed", "D") };
    const jfieldID field_windBearing { ::djinni::jniGetFieldID(clazz.get(), "windBearing", "D") };
    const jfieldID field_cloudCover { ::djinni::jniGetFieldID(clazz.get(), "cloudCover", "D") };
    const jfieldID field_humidity { ::djinni::jniGetFieldID(clazz.get(), "humidity", "D") };
    const jfieldID field_pressure { ::djinni::jniGetFieldID(clazz.get(), "pressure", "D") };
    const jfieldID field_visibility { ::djinni::jniGetFieldID(clazz.get(), "visibility", "D") };
    const jfieldID field_ozone { ::djinni::jniGetFieldID(clazz.get(), "ozone", "D") };
};

}  // namespace djinni_generated
