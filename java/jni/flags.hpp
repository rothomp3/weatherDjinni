// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from weather.idl

#pragma once

#include "djinni_support.hpp"
#include "flags.hpp"

namespace djinni_generated {

class Flags final {
public:
    using CppType = ::Flags;
    using JniType = jobject;

    using Boxed = Flags;

    ~Flags();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    Flags();
    friend ::djinni::JniClass<Flags>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/wta/weather/Flags") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/lang/String;Ljava/util/ArrayList;Ljava/lang/String;)V") };
    const jfieldID field_darkskyUnavailable { ::djinni::jniGetFieldID(clazz.get(), "darkskyUnavailable", "Ljava/lang/String;") };
    const jfieldID field_darkskyStations { ::djinni::jniGetFieldID(clazz.get(), "darkskyStations", "Ljava/util/ArrayList;") };
    const jfieldID field_datapointStations { ::djinni::jniGetFieldID(clazz.get(), "datapointStations", "Ljava/util/ArrayList;") };
    const jfieldID field_isdStations { ::djinni::jniGetFieldID(clazz.get(), "isdStations", "Ljava/util/ArrayList;") };
    const jfieldID field_lampStations { ::djinni::jniGetFieldID(clazz.get(), "lampStations", "Ljava/util/ArrayList;") };
    const jfieldID field_metarStations { ::djinni::jniGetFieldID(clazz.get(), "metarStations", "Ljava/util/ArrayList;") };
    const jfieldID field_metnoLicense { ::djinni::jniGetFieldID(clazz.get(), "metnoLicense", "Ljava/lang/String;") };
    const jfieldID field_sources { ::djinni::jniGetFieldID(clazz.get(), "sources", "Ljava/util/ArrayList;") };
    const jfieldID field_units { ::djinni::jniGetFieldID(clazz.get(), "units", "Ljava/lang/String;") };
};

}  // namespace djinni_generated
