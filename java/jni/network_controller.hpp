// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from weather.idl

#pragma once

#include "djinni_support.hpp"
#include "network_controller.hpp"

namespace djinni_generated {

class NetworkController final : ::djinni::JniInterface<::NetworkController, NetworkController> {
public:
    using CppType = std::shared_ptr<::NetworkController>;
    using JniType = jobject;

    using Boxed = NetworkController;

    ~NetworkController();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NetworkController>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return {jniEnv, ::djinni::JniClass<NetworkController>::get()._toJava(jniEnv, c)}; }

private:
    NetworkController();
    friend ::djinni::JniClass<NetworkController>;
    friend ::djinni::JniInterface<::NetworkController, NetworkController>;

    class JavaProxy final : ::djinni::JavaProxyCacheEntry, public ::NetworkController
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        std::vector<uint8_t> get(const std::string & URI) override;
        std::vector<uint8_t> post(const std::string & URI, const std::vector<uint8_t> & body) override;

    private:
        using ::djinni::JavaProxyCacheEntry::getGlobalRef;
        friend ::djinni::JniInterface<::NetworkController, ::djinni_generated::NetworkController>;
        friend ::djinni::JavaProxyCache<JavaProxy>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/wta/weather/NetworkController") };
    const jmethodID method_get { ::djinni::jniGetMethodID(clazz.get(), "get", "(Ljava/lang/String;)[B") };
    const jmethodID method_post { ::djinni::jniGetMethodID(clazz.get(), "post", "(Ljava/lang/String;[B)[B") };
};

}  // namespace djinni_generated
